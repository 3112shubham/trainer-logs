now campus and batches are not printing there and filters are also not working properly and export word doc feature is also not imported

exportservice.js : 
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import * as XLSX from 'xlsx';

export const exportToPDF = (data, filters, companyName) => {
  // Create new PDF instance
  const doc = new jsPDF();
  
  // Add company header
  doc.setFontSize(20);
  doc.setTextColor(40, 40, 40);
  doc.text(companyName || 'Training Management System', 14, 22);
  
  // Add filters info if any
  doc.setFontSize(12);
  doc.setTextColor(100, 100, 100);
  let filterText = 'All Entries';
  if (filters.campus || filters.batch) {
    filterText = `Filtered: ${filters.campus || 'All Campuses'} - ${filters.batch || 'All Batches'}`;
  }
  doc.text(filterText, 14, 32);
  
  // Add date of export
  doc.text(`Exported on: ${new Date().toLocaleDateString()}`, 14, 42);
  
  // Prepare data for the table
  const tableData = data.map(entry => [
    new Date(entry.date.seconds * 1000).toLocaleDateString(),
    entry.campus,
    entry.batch,
    entry.trainerName,
    entry.topic,
    entry.subtopic,
    entry.hours,
    entry.studentCount.toString()
  ]);

  // Add table using autoTable
  autoTable(doc, {
    startY: 50,
    head: [['Date', 'Campus', 'Batch', 'Trainer', 'Topic', 'Subtopic', 'Hours', 'Count']],
    body: tableData,
    theme: 'grid',
    headStyles: {
      fillColor: [41, 128, 185],
      textColor: 255,
      fontStyle: 'bold'
    },
    alternateRowStyles: {
      fillColor: [240, 240, 240]
    }
  });
  
  // Save the PDF
  doc.save('training_entries.pdf');
};

export const exportToExcel = (data, filters) => {
  // Format data for Excel
  const excelData = data.map(entry => ({
    Date: new Date(entry.date.seconds * 1000).toLocaleDateString(),
    Campus: entry.campus,
    Batch: entry.batch,
    'Trainer Name': entry.trainerName,
    Topic: entry.topic,
    Subtopic: entry.subtopic,
    'Start Time': entry.startTime,
    'End Time': entry.endTime,
    Hours: entry.hours,
    'Student Count': entry.studentCount
  }));
  
  // Create worksheet and workbook
  const worksheet = XLSX.utils.json_to_sheet(excelData);
  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, 'Training Entries');
  
  // Generate file name
  let fileName = 'training_entries.xlsx';
  if (filters.campus || filters.batch) {
    fileName = `training_entries_${filters.campus || 'all'}_${filters.batch || 'all'}.xlsx`;
  }
  
  // Save the file
  XLSX.writeFile(workbook, fileName);
};